{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Loot Price","text":"<p>Breve descri\u00e7\u00e3o: Um comparador de pre\u00e7os de jogos para PC com agentes de IA pode ser bastante \u00fatil e ainda abrir espa\u00e7o para aplicar diversos conceitos de sistemas multiagentes, scraping, automa\u00e7\u00e3o, IA e at\u00e9 gamifica\u00e7\u00e3o. Vamos estruturar isso melhor:</p>"},{"location":"#resumo-da-ideia","title":"\ud83e\udde0 Resumo da Ideia","text":"<p>Criar uma aplica\u00e7\u00e3o web ou desktop onde o usu\u00e1rio pode buscar por um jogo e receber uma compara\u00e7\u00e3o de pre\u00e7os entre diversas plataformas confi\u00e1veis (como Steam, Epic Games, GOG, Nuuvem, GreenManGaming etc.). O diferencial est\u00e1 no uso de agentes de IA aut\u00f4nomos que realizam periodicamente buscas, tratam os dados e alimentam um banco de dados para consulta em tempo real.</p>"},{"location":"#possiveis-funcionalidades","title":"\ud83d\udd0d Poss\u00edveis Funcionalidades","text":""},{"location":"#mvp-produto-viavel-minimo","title":"MVP (Produto Vi\u00e1vel M\u00ednimo):","text":"<ul> <li>Busca por nome de jogo</li> <li>Listagem de pre\u00e7os em diferentes lojas</li> <li>Links diretos para as lojas</li> <li>Hist\u00f3rico de pre\u00e7os b\u00e1sico</li> </ul>"},{"location":"#pos-mvp","title":"P\u00f3s-MVP:","text":"<ul> <li>Alertas personalizados de queda de pre\u00e7o</li> <li>Wishlist de jogos por usu\u00e1rio</li> <li>Notifica\u00e7\u00f5es por e-mail/Telegram/Discord</li> <li>Integra\u00e7\u00e3o com APIs de biblioteca de jogos (ex: Steam)</li> <li>Score de confiabilidade das lojas</li> <li>An\u00e1lise de tend\u00eancias de pre\u00e7o</li> <li>Recomenda\u00e7\u00e3o inteligente de promo\u00e7\u00f5es</li> </ul>"},{"location":"#sobre-os-agentes-de-ia","title":"\ud83e\udde0 Sobre os Agentes de IA","text":"<p>Cada agente pode:</p> <ul> <li>Ser respons\u00e1vel por uma loja espec\u00edfica (modularidade)</li> <li>Rodar periodicamente (cron ou sistema reativo)</li> <li>Usar scraping ou APIs</li> <li>Validar a confiabilidade das informa\u00e7\u00f5es</li> <li>Tratar promo\u00e7\u00f5es (ex: bundle, cupons, %)</li> </ul>"},{"location":"#stack-tecnologica-sugerida","title":"\ud83d\udee0\ufe0f Stack Tecnol\u00f3gica Sugerida","text":"<ul> <li>Frontend: React ou Next.js</li> <li>Backend: Node.js (Express) ou Python (FastAPI)</li> <li>Banco de Dados: PostgreSQL ou MongoDB</li> <li>Agentes de IA:<ul> <li>Python + framework multiagente (ex: JADE via bridge, SPADE, ou at\u00e9 agentes personalizados com asyncio/threading)</li> <li>Scrapy/Playwright/Requests + BeautifulSoup para scraping</li> </ul> </li> <li>Agendamento e Orquestra\u00e7\u00e3o: Celery + Redis, Cronjobs, ou Apache Airflow</li> <li>Hospedagem: Vercel (frontend), Railway/Render/Heroku ou VPS</li> </ul>"},{"location":"#roadmap-por-etapas","title":"\ud83d\uddfa\ufe0f Roadmap por Etapas","text":""},{"location":"#fase-1-planejamento-1-semana","title":"\ud83d\udd39 Fase 1 \u2013 Planejamento (1 semana)","text":"<ul> <li>Definir as lojas que ser\u00e3o integradas</li> <li>Verificar se possuem API ou se ser\u00e1 necess\u00e1rio scraping</li> <li>Mapear os atributos importantes: nome, pre\u00e7o, link, desconto, data</li> <li>Escolher stack inicial e arquitetura (mono repo, microservi\u00e7os, etc.)</li> </ul>"},{"location":"#fase-2-prototipo-e-backend-2-3-semanas","title":"\ud83d\udd39 Fase 2 \u2013 Prot\u00f3tipo e Backend (2-3 semanas)","text":"<ul> <li>Criar estrutura de banco de dados</li> <li>Criar um scraper simples para 1 loja (ex: Steam)</li> <li>Desenvolver backend b\u00e1sico com endpoints REST ou GraphQL</li> <li>Criar um agente para realizar scraping e salvar no banco</li> <li>Documentar tudo (Swagger/Postman)</li> </ul>"},{"location":"#fase-3-frontend-2-3-semanas","title":"\ud83d\udd39 Fase 3 \u2013 Frontend (2-3 semanas)","text":"<ul> <li>Tela de busca</li> <li>Tela de resultados com compara\u00e7\u00e3o</li> <li>Tela de detalhes do jogo</li> <li>Sistema simples de favoritos/localstorage</li> </ul>"},{"location":"#fase-4-multiagentes-e-escalabilidade-3-semanas","title":"\ud83d\udd39 Fase 4 \u2013 Multiagentes e Escalabilidade (3 semanas)","text":"<ul> <li>Implementar m\u00faltiplos agentes (um por loja)</li> <li>Orquestra\u00e7\u00e3o de tarefas (agendamentos, rea\u00e7\u00f5es a eventos)</li> <li>Sistema de logs, retries e confiabilidade</li> </ul>"},{"location":"#fase-5-funcionalidades-avancadas-3-semanas","title":"\ud83d\udd39 Fase 5 \u2013 Funcionalidades avan\u00e7adas (3+ semanas)","text":"<ul> <li>Alertas de pre\u00e7o</li> <li>Hist\u00f3rico de varia\u00e7\u00e3o</li> <li>Login e personaliza\u00e7\u00e3o</li> <li>Dashboard pessoal</li> </ul>"},{"location":"#possiveis-desafios-tecnicos","title":"\ud83e\uddea Poss\u00edveis Desafios T\u00e9cnicos","text":"<ul> <li>Rate limits das lojas</li> <li>Mudan\u00e7as no layout das p\u00e1ginas</li> <li>Performance dos scrapers</li> <li>Sincroniza\u00e7\u00e3o entre agentes</li> <li>Valida\u00e7\u00e3o e consist\u00eancia dos dados</li> </ul>"},{"location":"#exemplos-de-lojas-para-inicio","title":"\ud83c\udf10 Exemplos de Lojas para In\u00edcio","text":"<ul> <li>Steam</li> <li>Epic Games</li> <li>Nuuvem</li> <li>GOG</li> <li>GreenManGaming</li> </ul> <pre><code>flowchart TD\n  subgraph Frontend [\"Frontend (React)\"]\n    A1[Interface de Busca]\n    A2[Listagem de Pre\u00e7os]\n    A3[Detalhes do Jogo]\n  end\n\n  subgraph Backend API [\"Backend REST API (Node.js ou FastAPI)\"]\n    B1[/\"Endpoints p\u00fablicos\"/]\n    B2[/\"Valida\u00e7\u00e3o e autentica\u00e7\u00e3o (futuro)\"/]\n    B3[/\"Consulta ao Banco de Dados\"/]\n  end\n\n  subgraph Agents [\"Agentes de Coleta (Python)\"]\n    C1[Agent - Steam]\n    C2[Agent - Epic Games]\n    C3[Agent - Nuuvem]\n    C4[Agent - GOG]\n  end\n\n  subgraph DB [\"Banco de Dados (MongoDB ou PostgreSQL)\"]\n    D1[Tabela Jogos]\n    D2[Tabela Pre\u00e7os]\n    D3[Tabela Hist\u00f3rico]\n  end\n\n  subgraph Scheduler [Orquestra\u00e7\u00e3o de Agentes]\n    E1[Cronjob / Airflow / Celery]\n  end\n\n  %% Liga\u00e7\u00f5es\n  A1 --&gt; B1\n  A2 --&gt; B1\n  A3 --&gt; B1\n  B1 --&gt; B3\n  B3 --&gt; D1\n  B3 --&gt; D2\n  B3 --&gt; D3\n\n  E1 --&gt; C1\n  E1 --&gt; C2\n  E1 --&gt; C3\n  E1 --&gt; C4\n\n  C1 --&gt; D1\n  C2 --&gt; D1\n  C3 --&gt; D1\n  C4 --&gt; D1\n\n  C1 --&gt; D2\n  C2 --&gt; D2\n  C3 --&gt; D2\n  C4 --&gt; D2\n\n</code></pre> <p>Seguindo a arquitetura de microservi\u00e7os, podemos dividir o projeto LootPrice em servi\u00e7os independentes, cada um com sua responsabilidade, linguagem e stack mais adequada. Abaixo est\u00e1 a estrutura geral sugerida + bibliotecas para cada servi\u00e7o.</p>"},{"location":"#estrutura-de-diretorios-microservicos","title":"\ud83d\uddc2\ufe0f Estrutura de Diret\u00f3rios - Microservi\u00e7os","text":"<pre><code>lootprice/\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 docs/                            # Documenta\u00e7\u00e3o MkDocs\n\u2502   \u251c\u2500\u2500 mkdocs.yml\n\u2502   \u2514\u2500\u2500 docs/\n\u2502       \u251c\u2500\u2500 index.md\n\u2502       \u2514\u2500\u2500 architecture.md\n\u2502\n\u251c\u2500\u2500 frontend/                        # Frontend com Next.js\n\u2502   \u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u2514\u2500\u2500 styles/\n\u2502   \u251c\u2500\u2500 next.config.js\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 tsconfig.json\n\u2502\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 api-gateway/                 # Orquestrador de requisi\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 tsconfig.json\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 auth-service/                # Servi\u00e7o de autentica\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 tsconfig.json\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 user-service/                # Gerencia usu\u00e1rios e prefer\u00eancias\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 tsconfig.json\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 price-tracker/              # L\u00f3gica de rastreamento e compara\u00e7\u00e3o de pre\u00e7os\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 tsconfig.json\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 notification-service/       # Envio de notifica\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 mailer/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 scheduler/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2502   \u2514\u2500\u2500 tsconfig.json\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 scraper/                    # Scraper com agentes em Python\n\u2502   \u2502   \u251c\u2500\u2500 agents/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 steam_agent.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 epic_agent.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 nuuvem_agent.py\n\u2502   \u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 parser.py\n\u2502   \u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2502   \u2514\u2500\u2500 requirements.txt\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 database/                   # Banco de dados (Mongo ou PostgreSQL)\n\u2502       \u251c\u2500\u2500 init.sql                # Opcional para PostgreSQL\n\u2502       \u2514\u2500\u2500 mongo/                  # Scripts se usar Mongo\n\u2502\n\u2514\u2500\u2500 Dockerfile                      # Dockerfile principal (build multi-stage)\n\n</code></pre>"},{"location":"#stacks-e-bibliotecas-por-servico","title":"\ud83d\udd27 Stacks e Bibliotecas por Servi\u00e7o","text":""},{"location":"#1-gateway-api-rest-api-para-o-frontend","title":"\ud83d\udd39 1. gateway-api/ (REST API para o frontend)","text":"<p>Linguagem: Node.js com Express (ou FastAPI com Python)</p> <p>Se usar Node.js:</p> <ul> <li><code>express</code> \u2013 servidor web</li> <li><code>cors</code> \u2013 habilitar CORS</li> <li><code>axios</code> ou <code>node-fetch</code> \u2013 requisi\u00e7\u00f5es externas</li> <li><code>mongoose</code> ou <code>pg</code> \u2013 conex\u00e3o com o banco (Mongo ou Postgres)</li> <li><code>dotenv</code> \u2013 vari\u00e1veis de ambiente</li> <li><code>joi</code> ou <code>zod</code> \u2013 valida\u00e7\u00e3o de dados</li> <li><code>swagger-ui-express</code> \u2013 documenta\u00e7\u00e3o de API</li> </ul> <p>Se usar FastAPI (Python):</p> <ul> <li><code>fastapi</code> \u2013 API leve e r\u00e1pida</li> <li><code>uvicorn</code> \u2013 servidor ASGI</li> <li><code>pydantic</code> \u2013 schemas de dados</li> <li><code>sqlalchemy</code> ou <code>motor</code> \u2013 ORM ou driver para MongoDB</li> <li><code>httpx</code> \u2013 chamadas HTTP</li> <li><code>python-dotenv</code> \u2013 configs</li> </ul>"},{"location":"#2-scraper-agents-um-por-loja","title":"\ud83d\udd39 2. scraper-agents/ (um por loja)","text":"<p>Linguagem: Python</p> <p>Bibliotecas:</p> <ul> <li><code>requests</code> ou <code>httpx</code> \u2013 chamadas HTTP</li> <li><code>beautifulsoup4</code> \u2013 parsing de HTML</li> <li><code>playwright</code> \u2013 scraping avan\u00e7ado com JS din\u00e2mico</li> <li><code>lxml</code> \u2013 parser r\u00e1pido</li> <li><code>pydantic</code> \u2013 valida\u00e7\u00e3o de dados</li> <li><code>pymongo</code> ou <code>sqlalchemy</code> \u2013 banco de dados</li> <li><code>tenacity</code> \u2013 retries autom\u00e1ticos</li> <li><code>loguru</code> \u2013 logs simplificados</li> <li><code>schedule</code> \u2013 execu\u00e7\u00e3o programada simples</li> </ul> <p>\u2192 Alternativa: usar Scrapy como framework completo de scraping.</p>"},{"location":"#3-scheduler-orquestrador-dos-agentes","title":"\ud83d\udd39 3. scheduler/ (orquestrador dos agentes)","text":"<p>Linguagem: Python</p> <p>Bibliotecas (dependendo da escolha):</p> <p>Para algo simples:</p> <ul> <li><code>schedule</code> \u2013 cron-like em Python</li> <li><code>APScheduler</code> \u2013 agendador de tarefas</li> </ul> <p>Para algo escal\u00e1vel:</p> <ul> <li><code>celery</code> + <code>redis</code> \u2013 fila de tarefas distribu\u00edda</li> <li><code>airflow</code> \u2013 se quiser um DAG visual e mais controle</li> </ul>"},{"location":"#4-frontend-cliente-web","title":"\ud83d\udd39 4. frontend/ (cliente web)","text":"<p>Linguagem: JavaScript/TypeScript (React)</p> <p>Frameworks e libs:</p> <ul> <li><code>react</code> + <code>vite</code> ou <code>next.js</code></li> <li><code>axios</code> ou <code>fetch</code> \u2013 chamadas \u00e0 API</li> <li><code>tailwindcss</code> \u2013 estiliza\u00e7\u00e3o moderna</li> <li><code>react-query</code> ou <code>swr</code> \u2013 cache e fetch inteligente</li> <li><code>react-router-dom</code> \u2013 rotas (se n\u00e3o usar Next)</li> <li><code>zustand</code> ou <code>redux</code> \u2013 estado global (opcional)</li> <li><code>chart.js</code> ou <code>recharts</code> \u2013 hist\u00f3rico de pre\u00e7os</li> <li><code>heroicons</code> ou <code>phosphor-icons</code> \u2013 \u00edcones</li> </ul>"},{"location":"#5-database","title":"\ud83d\udd39 5. database/","text":"<ul> <li><code>PostgreSQL</code> ou <code>MongoDB</code></li> <li><code>prisma</code> (Node) ou <code>sqlalchemy</code> (Python) para ORM</li> <li><code>mongodb-atlas</code> (se cloud) ou <code>docker</code> para local</li> <li><code>alembic</code> (Python) ou <code>knex</code> (Node) \u2013 migrations</li> </ul>"},{"location":"#6-notifications-alertas-e-comunicacao","title":"\ud83d\udd39 6. notifications/ (alertas e comunica\u00e7\u00e3o)","text":"<p>Linguagem: Python</p> <p>Bibliotecas:</p> <ul> <li><code>smtplib</code> ou <code>email</code> \u2013 e-mail SMTP</li> <li><code>requests</code> \u2013 Webhooks (Telegram, Discord)</li> <li><code>python-telegram-bot</code> \u2013 integra\u00e7\u00e3o direta</li> <li><code>sendgrid</code> / <code>mailgun</code> \u2013 e-mails via API</li> </ul>"},{"location":"#infraestrutura-recomendada","title":"\u2601\ufe0f Infraestrutura Recomendada","text":"<ul> <li>Docker para cada servi\u00e7o (multi-container)</li> <li>Docker Compose para orquestra\u00e7\u00e3o local</li> <li>GitHub Actions ou GitLab CI \u2013 CI/CD</li> <li>Railway / Render / Vercel para deploy r\u00e1pido</li> <li>Monitoramento: Grafana + Prometheus (futuramente)</li> </ul>"},{"location":"#checklist-para-o-inicio","title":"\u2705 Checklist para o In\u00edcio","text":"Etapa Status Estrutura de diret\u00f3rios criada \u2b1c Dockerfile + Compose b\u00e1sico \u2b1c API Gateway funcional \u2b1c 1 Agente funcional (ex: Steam) \u2b1c Scheduler inicial com Cron \u2b1c Frontend inicial com busca \u2b1c Banco de dados funcional \u2b1c"}]}